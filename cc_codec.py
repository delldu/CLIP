"""Create Codec For C Language."""
# coding=utf-8
#
# /************************************************************************************
# ***
# ***    Copyright 2023 Dell(18588220928@163.com), All Rights Reserved.
# ***
# ***    File Author: Dell, Sat 29 Jul 2023 09:12:59 PM CST
# ***
# ************************************************************************************/
#
# cc_codec -- Create C/C++ codec
# python cc_codec.py | tee project/clip_codec.h

from clip.simple_tokenizer import SimpleTokenizer
import pdb


codec = SimpleTokenizer()
COLS = 16

def x(str):
    str = str.replace("\\", "\\" + "\\")
    str = str.replace("\"", "\\" + "\"")
    return str

def create_byte_encoder_list():
    '''
        const char *codec_byte_list[] = {
            "!",
            "Â®",
        };
    '''
    count = 0
    lines = []
    ds = codec.byte_encoder

    print(f"const char *codec_byte_list[{len(ds)}] = {{")
    for i in range(len(ds)):
        v = ds[i]
        lines.append(f"\"{x(v)}\",")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


def create_word_encoder_list():
    '''
        const char *codec_word_list[] = {
            "a</w>",
            "hello</w>",
            "diagram</w>",
        };
    '''
    count = 0
    lines = []    
    ds = {}
    for k, v in codec.encoder.items():
        ds[v] = k

    print(f"const char *codec_word_list[{len(ds)}] = {{")
    for i in range(len(ds)):
        v = ds[i]
        lines.append(f"\"{x(v)}\",")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")



def create_bpe_ranks_list():
    '''
        const char *bpe_ranks_list[] = {
            "a",
        };
    '''
    count = 0
    lines = []

    ds = {}
    for k, v in codec.bpe_ranks.items():
        ds[v] = k

    print(f"const char *bpe_ranks_list[{len(ds)}] = {{")
    for i in range(len(ds)):
        v = ds[i]

        lines.append(f"\"{x(v[0])} {x(v[1])}\",")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


if __name__ == '__main__':
    print("/**********************************************************************")
    print("* Warnning: DO NOT Edit this file, it's created by cc_codec.py")
    print("**********************************************************************/")

    create_byte_encoder_list()
    create_word_encoder_list()
    create_bpe_ranks_list()
