"""Create Codec For C Language."""
# coding=utf-8
#
# /************************************************************************************
# ***
# ***    Copyright 2023 Dell(18588220928@163.com), All Rights Reserved.
# ***
# ***    File Author: Dell, Sat 29 Jul 2023 09:12:59 PM CST
# ***
# ************************************************************************************/
#
# Create C/C++ codec
# python cc_codec.py | tee project/codec.h

from clip.simple_tokenizer import SimpleTokenizer
import pdb


codec = SimpleTokenizer()
COLS = 8
FAST = True

def x(str):
    str = str.replace("\\", "\\" + "\\")
    str = str.replace("\"", "\\" + "\"")
    return str

def create_byte_encoder_code():
    '''
        static std::map<uint32_t, std::string> clip_text_byte_encoder {
            {33, "!"},
            {174, "®"},
        };
    '''
    count = 0
    lines = []
    print("static std::map<uint32_t, std::string> clip_text_byte_encoder {")
    for k, v in codec.byte_encoder.items():
        lines.append(f"{{{k}, \"{x(v)}\"}},")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


def create_word_encoder_code():
    '''
        static std::map<std::string, uint32_t> clip_text_word_encoder {
            {"a</w>", 320},
            {"hello</w>", 3306},
            {"diagram</w>", 22697},
        };
    '''
    count = 0
    lines = []    
    print("static std::map<std::string, uint32_t> clip_text_word_encoder {")
    for k, v in codec.encoder.items():
        lines.append(f"{{\"{x(k)}\", {v}}},")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


def create_bpe_ranks_code():
    '''
        static std::map<std::string, uint32_t> clip_text_bpe_ranks {
            {('i', 'n'), 0},
        };
    '''
    count = 0
    lines = []    
    print("static std::map<std::string, uint32_t> clip_text_bpe_ranks {")
    for k, v in codec.bpe_ranks.items():
        lines.append(f"{{\"{x(k[0])} {x(k[1])}\", {v}}},")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


def create_byte_decoder_code():
    '''
        static std::map<std::string, uint32_t> clip_text_byte_decoder {
            {"!", 33},
            {"®", 174},
        };
    '''
    count = 0
    lines = []    
    print("static std::map<std::string, uint32_t> clip_text_byte_decoder {")
    for k, v in codec.byte_decoder.items():
        lines.append(f"{{\"{x(k)}\", {v}}},")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


def create_word_decoder_code():
    '''
        static std::map<uint32_t, std::string> clip_text_word_decoder {
            {320, "a</w>"},
            {3306, "hello</w>"},
            {22697, "diagram</w>"},
        };
    '''
    count = 0
    lines = []
    print("static std::map<uint32_t, std::string> clip_text_word_decoder {")
    for k, v in codec.decoder.items():
        lines.append(f"{{{k}, \"{x(v)}\"}},")
        if (count + 1) % COLS == 0:
            print("    ", " ".join(lines))
            lines = []
        count = count + 1

    if len(lines) > 0:
        print("    ", " ".join(lines))

    print("};")


if __name__ == '__main__':
    print("/**********************************************************************")
    print("* Warnning: DO NOT Edit this file, it's created by cc_codec.py")
    print("**********************************************************************/")

    if FAST:
        print("#define CLIP_TEXT_FAST")
    else:
        print("#undef CLIP_TEXT_FAST")

    create_byte_encoder_code()
    create_word_encoder_code()
    create_bpe_ranks_code()

    if FAST:
        create_byte_decoder_code()
        create_word_decoder_code()
